#include "fgrayscale.h"

/*****************************************************************************
 *
 *****************************************************************************/
FGrayscale::FGrayscale(QObject* parent) : Filter(parent)
{
}

/*****************************************************************************
 *
 *****************************************************************************/
FGrayscale::~FGrayscale()
{

}

/*****************************************************************************
 *
 *****************************************************************************/
QString FGrayscale::getName()
{
    return QString("Color to Grayscale");
}

/*****************************************************************************
 *
 *****************************************************************************/
QString FGrayscale::getCaption()
{
    return QString("Grayscale");
}

/*****************************************************************************
 *
 *****************************************************************************/
QVector<DatInfo> FGrayscale::getInputTypes()
{
    QVector<DatInfo> ans;
    ans.push_back(DatInfo(IMAGE3, "Color Image"));
    return ans;
}

/*****************************************************************************
 *
 *****************************************************************************/
QVector<DatInfo> FGrayscale::getOutputTypes()
{
    QVector<DatInfo> ans;
    ans.push_back(DatInfo(IMAGE1, "Grayscale Image"));
    return ans;
}


/*****************************************************************************
 *
 *****************************************************************************/
void FGrayscale::showConfig()
{
    dialog.exec();
}

/*****************************************************************************
 *
 *****************************************************************************/
QMap<QString, QVariant> FGrayscale::getData()
{
    QMap<QString, QVariant> ans;
    ans.insert("Name", QVariant(getName()));

    return ans;

}

/*****************************************************************************
 *
 *****************************************************************************/
void FGrayscale::setData(QMap<QString, QVariant> data)
{

}

/*****************************************************************************
 *
 *****************************************************************************/
void FGrayscale::reset()
{

}

/*****************************************************************************
 *
 *****************************************************************************/
QVector<Data*> FGrayscale::run(QVector<Data*> dat)
{
    QVector<Data*> ans;
    DImage3* d = dynamic_cast<DImage3*>(dat[0]);

    Mat outimg;
    cvtColor(d->getImage(), outimg, CV_BGR2GRAY);

    DImage1* out = new DImage1();
    out->setImage(outimg);
    ans.push_back(out);

    return ans;

}

static FilterFactory<FGrayscale> fGrayscale;
