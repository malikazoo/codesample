#include "filter.h"

/*****************************************************************************
 * Constructor.  Creates a view object
 *****************************************************************************/
Filter::Filter(QObject *parent) :
    MapObj(parent)
{

}

/*****************************************************************************
 * Destructor. Deletes the view if needed
 *****************************************************************************/
Filter::~Filter()
{

}

/*****************************************************************************
 *
 *****************************************************************************/
ListType Filter::getType()
{
    return FILTER;
}

/*****************************************************************************
 * Returns the name of the filter.  Blank for the base object, should not
 * ever be called.
 *****************************************************************************/
QString Filter::getName()
{
    return QString("");
}

/*****************************************************************************
 *
 *****************************************************************************/
QSize Filter::getBaseSize()
{
    return QSize(80, 100);
}

/*****************************************************************************
 *
 *****************************************************************************/
FiltList Filter::getList()
{
    return FiltList("BlankName", "BlankIcon");
}

/*****************************************************************************
 *
 *****************************************************************************/
QMap<QString, QVariant> Filter::getRep()
{
    QMap<QString, QVariant> ans = getData();

    ans.insert("Map_Type", QVariant("Filter"));

    return ans;
}

/*****************************************************************************
 *
 *****************************************************************************/
void Filter::setRep(QMap<QString, QVariant> rep)
{
    setData(rep);
}





